<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This is an automatically generated file. DO NOT EDIT THIS FILE DIRECTLY. Rather, use the _ref.xml files found in the 'edits' folder.-->
<c74object name="gf">
	<digest>
		Real-time following and recognition of time profiles
	</digest>
	<description>
    The object compares incoming data flow with a set of prerecorded "phrases" . It returns two types of  outputs:<br />
- <i>"likelihood"</i> =  how close is the performed phrases to the recorded ones, or the "likeliest" = which phrase it is<br />
- <i>"time"</i> index = the time progression of the performed phrase (i.e. cursor)<br />
It can work with any type of multidimentional data, regularly sampled (sensor data, sound descriptors, image descriptors, etc.)<br />
	</description>
	<!--METADATA-->
	<metadatalist>
		<metadata name="author">
			Bruno Zamborlin
		</metadata>
		<metadata name="tag">
			Follower performance recognition real-time time profiles
		</metadata>
	</metadatalist>
	<!--INLETS-->
	<inletlist>
		<inlet id="0" name="INLET_NAME">
			<digest>
				incoming observations, messages
			</digest>
			<description>
				incoming observations, messages
			</description>
		</inlet>
		<inlet id="1" name="INLET_NAME">
			<digest>
				incoming observation, messages
			</digest>
			<description>
				TEXT_HERE
			</description>
		</inlet>
	</inletlist>	
	
	<!--ARGUMENTS-->
	<objarglist/>
	<!--MESSAGES-->
	<methodlist>
		<method name="int">
			<arglist>
				<arg id="0" name="Observation" type="int" optional="0" />
			</arglist>
			<description>
				Considered as an observation of one channel (see the 'list' method).
			</description>
		</method>
		<method name="float">
			<arglist>
				<arg id="0" name="Observation" type="float" optional="0" />
			</arglist>
			<description>
				Considered as an observation of one channel (see the 'list' method).
			</description>
		</method>
		<method name="list">
			<arglist>
				<arg id="0" name="Observation" type="list" optional="0" />
			</arglist>
			<description>
				The incoming observation. <br/>
				The size of this list is equal to the number of channels of the phrase.<br/>
				If the phrase is empty, its number of channels is automatically set to the size of this list.<br/>
				If the phrase is not empty and an observation longer or shorted than its number of channels is received, than an error occurs.
			</description>
		</method>
        <method name="bang">
			<arglist />
			<description>
				Force the follower to dump results (through the first and the second outlets), even if no new observations have been received.
			</description>
		</method>
		<method name="clear">
			<arglist>
				<arg id="0" name="index or name of the phrase" type="int or symbol" optional="0" />
			</arglist>
			<description>
				The word 
				<m>
					clear
				</m>
				, followed by the index (int) or the name (symbol) of a phrase, deletes all information about that phrase.
				<br />
				If 0 or no arguments are provided, all phrases are deleted.
			</description>
		</method>
		<method name="dump">
			<arglist />
			<digest>
				Dump parameters values through the right outlet.
			</digest>
			<description>
				Dump parameters values through the right outlet.
			</description>
		</method>
        <method name="dumpalfa">
			<arglist>
				<arg id="0" name="phrase index (0 means off)" type="int" optional="0" />
			</arglist>
			<description>
				If different from zero (default), it dumps the probability function of the specified phrase through the right outlet, prepended by the symbol 'alfa'.			
                </description>
		</method>
		<method name="dumpfiltervector">
			<arglist>
				<arg id="0" name="phrase index (0 means off)" type="int" optional="0" />
			</arglist>
			<description>
				If different from zero (default), it dumps the filter vector of the specified phrase through the right outlet, prepended by the symbol 'filtervector'.
			</description>
		</method>
		<method name="follow">
			<arglist />
			<description>
				Set the 'follow' mode. In this mode, all incoming observations are used to compare the performed phrase with the recorded examples.<br/>
				In this mode, everytime that an observation is received, results are dumped through the first and the second outlets (see 'outlets')<br/>
				<br />
			</description>
		</method>
		<method name="fr">
			<arglist>
				<arg id="0" name="frame rate" type="float" optional="0" />
			</arglist>
			<description>
				Set the framerate of incoming observations in ms (default 20)
			</description>
		</method>
		<method name="learn">
			<arglist>
				<arg id="0" name="The index of the learning phrase" type="int" optional="0" />
			</arglist>
			<description>
				Set the 'learn' mode. In this mode, all incoming observations are used to record the phrase that corresponds to the specified index.
				<br />
				The number of channels of the recording phrase will correspond to the size of the first incoming observation.
				<br />
				No results are dumped in this mode. However, the 'learn' mode is not exclusive, that means you can learn and 'follow' (or 'play') at the same time.
				<br />
				Learn 0 or no args means learn off.
				<br />
			</description>
		</method>
		<method name="pause">
			<arglist />
			<description>
				Set the pause state. The object stops considering incoming observations until a 'resume' message is received.
			</description>
		</method>
		<method name="play">
			<arglist />
			<description>
				Set the 'play' mode. In this mode, the follower automatically advances by one frame for each received information, without really 'following' the performance (as if the 'tolerance' parameter would be extremely high)
			</description>
		</method>
        <method name="enable">
			<arglist>
				<arg id="0" name="on/off" type="int" optional="0" />
			</arglist>
			<description>
				Enable or disable the specified phrase
			</description>
		</method>
         <method name="sceneenable">
			<arglist>
				<arg id="0" name="on/off" type="int" optional="0" />
			</arglist>
			<description>
				If on, the gf will enable/disable each phrase automatically based on the transition matrix specified by the 'transition' method (off by default)
			</description>
		</method>
		<method name="transition">
			<arglist>
				<arg id="0" name="scene index" type="int" optional="0" />
				<arg id="1" name="transition 'from'" type="int" optional="0" />
				<arg id="2" name="transition 'to'" type="int" optional="0" />
				<arg id="3" name="value" type="0/1" optional="0" />
			</arglist>
			<description>
				Set the value of a cel of a scene matrix.
				<br />
				A scene is a boolean matrix that specifies the order in which the phrases will be performed (or just which phrases are enabled and which are disabled).
				<br />
				A value &quot;1&quot; in the cel [i,j] of the scene 's' specifies that when the scene 's' is set (by the 'setscene' method), as soon as the performance of the phrase 'j' ends than the phrase 'i' will be enabled.
				<br />
				By default, every cel of every scene is set to '1' (that means that all phrases are always enabled).
				<br />
				The first COLUMN of a scene is the 'begin' row, and specifies which phrases are enabled when this scene is set.
				<br />
				The first ROW of a scene is the 'end' column, and specifies the list of phrases after which the performance is considered completed. In this case, an 'end' symbol is dumped from the right outlet.
			</description>
		</method>
		<method name="scene">
			<arglist>
				<arg id="0" name="the index of the scene" type="int" optional="0" />
			</arglist>
			<description>
				Set the current scene (see 'scene' for details).
			</description>
		</method>
		<method name="resume">
			<arglist />
			<description>
				Resume the follower after a 'pause' state. See 'pause' message for details.
			</description>
		</method>
		<method name="restart">
			<arglist>
				<arg id="0" name="phrase index" type="int" optional="1" />
			</arglist>
			<description>
				Restart following the phrase from begin. All the likelihoods will be resetted.
				<br />
				Restart 0 or no args means 'restart all phrases'.
			</description>
		</method>
		<method name="restartall">
			<arglist />
			<description>
				Restart following all phrases from begin (same as 'restart 0').
				<br />
				All the likelihoods will be resetted.
			</description>
		</method>
		<method name="stop">
			<arglist />
			<description>
				Stop following. Incoming observations will be not considered.		
				<br />
				See 'follow' and 'play' messages for details.
			</description>
		</method>
		<method name="write">
			<arglist>
				<arg id="0" name="filepath" type="symbol" optional="1" />
			</arglist>
			<description>
				Save all parameters and phrases as text file.
			</description>
		</method>
        <method name="read">
			<arglist>
				<arg id="0" name="filepath" type="symbol" optional="1" />
			</arglist>
			<description>
				Read all parameters and phrases in a text file.
			</description>
		</method>
	
	
		<method name="maxphrases" get="1" set="1" type="int" size="1">
        <arglist/>
			<description>
				Define the maximum number of phrases (default=10). Warning: changing this parameter will reset all data.
			</description>
		</method>
		<method name="maxchannels" get="1" set="1" type="int" size="1">
			<description>
				Set the maximum number of channels (default=20). Warning: changing this parameter will reset all data.
			</description>
		</method>
		<method name="maxcapacity" get="1" set="1" type="int" size="1">
			<description>
				Set the maximum capacity of a phrase, expressed in frames (default = 10000).<br/> 
				A capacity of 36000 means that a phrase can store up to 36000 frames (1 hour with a framerate of 10hz). <br/> 
				Warning: changing this parameter will reset all data.
			</description>
		</method>
		<method name="likelihoodcontrast" get="1" set="1" type="float" size="1">
			<description>
				Set the contrast in the 'likelihoodnorm' results. <br/> 
				The value is in [-1, 1].
			</description>
		</method>
		<method name="likelihoodwindow" get="1" set="1" type="int" size="1">
			<description>
				 Set the size of the window in which the likelihood is calculated. <br/>
				The likelihood is so calculated considering the last 'likelihoodwindow' frames. (default=100) <br/>
				The smaller this value, the faster the likelihood changes.
			</description>
		</method>
		<method name="smoothingspeed" get="1" set="1" type="int" size="1">
			<description>
				 Set the size of the window in which the speed is calculated. <br/>
				The speed is so calculated considering the last 'smoothingspeed' frames. (default=100) <br/>
				The smaller this value, the faster the speed changes.
			</description>
		</method>
		<method name="beginning" get="1" set="1" type="int" size="1">
			<description>
				 Set this parameter to 1 if, after a restart, a phrase is supposed to start from begin (default).<br/>
				Set 0 if a phrase could start from each frame. The 'window' parameter should logically be set to 0 in this case.
			</description>
		</method>
		<method name="framerate" get="1" set="1" type="float" size="1">
			<description>
				The costant framerate of the incoming observation, expressed in milliseconds.<br/>
			</description>
		</method>
		<method name="tolerance" get="1" set="1" type="float" size="1">
			<description>
				This parameter set how much the follower should be 'tolerant' with the performance.<br/>
				Setting this parameter to a high value means that the follower will go forward even if the performance is not very close to the recorded example.<br/>
				Teoretically, this parameter should be as low as possible without freezing the following.<br/>
			</description>
		</method>
		<method name="autorestart" get="1" set="1" type="0/1/2" size="1">
			<description>
				0 : no autorestart (loop mode) (default)
				1 : when the likeliest phrase reaches its end (i.e. its 'end marker'), a 'restartall' method is invoked, restarting all phrases and resetting their likelihoods.
				2 : when the likelihood of a phrase is less then its limit (defined by the 'autorestartlimit' method), then this phrase restarts from begin. In this case, its likelihood is <i>freezed</i> by a certain amount of frames (defined by the 'freezelikelihoodamount' method).
			</description>
		</method>
		<method name="autorestartlimit" get="1" set="1" type="float" size="1">
			<description>
				See the 'autorestart' method
			</description>
		</method>
		<method name="freezelikelihoodamount" get="1" set="1" type="float" size="1">
			<description>
				See the 'autorestart' method
			</description>
		</method>
		<method name="autotimetag" get="1" set="1" type="0/1" size="1">
			<description>
				If autotimetag is enabled, the first float of the observation is considered as a timetag (default=0).<br/>
			</description>
		</method>
		<method name="weights" get="1" set="1" type="float list in 0/1" size="1">
			<description>
				Specifies the weight list for each channel, so how much each channel is 'important' compared with the others. <br/>
				0 means that the channel is not even considered.
			</description>
		</method>
		<method name="channelname" get="1" set="1" type="int + symbol" size="1">
			<description>
				Syntax: 'channelname' int:phrase_index symbol:name.<br/>
				Set a name for the given channel. This name is used in the editor and in dump messages.
			</description>
		</method>
		<method name="window" get="1" set="1" type="int" size="1">
			<description>
				 Set the size of the calculation window. <br/>
				If the size of the window is equal to 'n', than only 'n' frames after the actual position of the follower are considered. <br/>
				The smaller is this parameter, the less CPU expensive is the follower. <br/>
                If the size of the window is bigger than the size pf the phrase, the window is automatically set to fix the phrase size <br/>
				0 means that the calculation is performed on the whole phrase (default = 1000)<br/>
			</description>
		</method>
		<method name="name" get="1" set="1" type="int + symbol" size="1">
			<description>
				Syntax: 'name' int:phrase_index symbol:name.<br/>
				Set a name for the given phrase. This name is currently used in the dump message, in markers and in the associated MuBu.
			</description>
		</method>
        
        
        <method name="jumptopos" get="0" set="0" type="float:position [int:phrase_index]" size="1">
			<description>
				Syntax: 'jumptopos' float:position [int:phrase_index]<br/>
				Jump to a given position, expressed with a float in [0,1], without triggering markers.
			</description>
		</method>
        
        <method name="gotopos" get="0" set="0" type="float:position [int:phrase_index]" size="1">
			<description>
				Syntax: 'gotopos' float:position [int:phrase_index]<br/>
				Go to a given position, expressed with a float in [0,1], triggering all markers between the current index and the destination.
			</description>
		</method>
        
        <method name="jumptoframe" get="0" set="0" type="jumptoframe int:frame [int:phrase_index]" size="1">
			<description>
				Syntax: jumptoframe int:frame [int:phrase_index]<br/>
				Jump to a given frame without triggering markers.
			</description>
		</method>
        
        <method name="gotoframe" get="0" set="0" type="gotoframe int:frame [int:phrase_index]" size="1">
			<description>
				Syntax: gotoframe int:frame [int:phrase_index]<br/>
				Go to a given frame, triggering all markers between the current index and the destination.
			</description>
		</method>
        
        <method name="jumptomarker" get="0" set="0" type="jumptomarker symbol:marker_name [int:phrase_index] [int:preroll]" size="1">
			<description>
				Syntax: jumptomarker symbol:marker_name [int:phrase_index] [int:preroll]<br/>
				Jump to a given marker without triggering markers in the between.
			</description>
		</method>
        
        <method name="gotomarker" get="0" set="0" type="gotomarker symbol:marker_name [int:phrase_index] [int:preroll]" size="1">
			<description>
				Syntax: gotomarker symbol:marker_name [int:phrase_index] [int:preroll]<br/>
				Go to a given marker triggering all markers in the between.
			</description>
		</method>
        
        <method name="jumptonextmarker" get="0" set="0" type="jumptonextmarker  [int:phrase_index] [int:preroll]" size="1">
			<description>
				Syntax: jumptonextmarker[int:phrase_index] [int:preroll]<br/>
				Jump to the next marker, without triggering it.
			</description>
		</method>
        
        <method name="gotonextmarker" get="0" set="0" type="gotonextmarker  [int:phrase_index] [int:preroll]" size="1">
			<description>
				Syntax: gotonextmarker[int:phrase_index] [int:preroll]<br/>
				Go to the next marker, without triggering it.
			</description>
		</method>
        
        <method name="jumptolastmarker" get="0" set="0" type="jumptolastmarker  [int:phrase_index] [int:preroll]" size="1">
			<description>
				Syntax: jumptolastmarker[int:phrase_index] [int:preroll]<br/>
				Jump to the last marker, without triggering it.
			</description>
		</method>
        
        <method name="gotolastmarker" get="0" set="0" type="gotolastmarker  [int:phrase_index] [int:preroll]" size="1">
			<description>
				Syntax: gotolastmarker[int:phrase_index] [int:preroll]<br/>
				Go to the last marker, without triggering it.
			</description>
		</method>
        
        
        
	</methodlist>
    
    

	<!--methodS-->
	
	
	<!--OUTLETS-->
		<!--<outletlist>
		<outlet id="0" name="FOLLOW"> 
			<digest>-->
			
	<misc name="Outlets">
		<entry name="1 - Following">
			<description>
				<br /><br />The lists that contains information about the following. It is dumped everytime that the object receives an observation, and only if it is in 'follow' or 'play' mode.
				<br />
				4 lists are dumped through this outlet. Each list has a size equal to the number of learned phrases and is prepended by a different keyword:
				<br />
				- 'frame' :		[INT]	The position of the follower. This value says if the follower is at the beginning, middle or end of the phrase. It is expressed in frames.
				<br />
				- 'time'	:	[FLOAT] Same as 'frame', but expressed in milliseconds.
				<br />
				- 'timenorm' :	[FLOAT] Same as 'frame', but expressed in a float between 0 (begin) and 1 (end).
				<br />
				- 'speed':		[FLOAT] It represents the speed of the performance compared to the original one. 1 means 'same speed', 0.5 means 'half speed and so on.	
				<br />
			
			</description>
		</entry>
	
		
		<entry name="2 - Recognizing">
			<description>
				<br /><br />The lists that contains information about the recognition. It is dumped everytime that the object receives an observation, and only if it is in 'follow' or 'play' mode.
				<br />
				4 lists are dumped through this outlet. Each list has a size equal to the number of learned phrases and is prepended by a different keyword:
				<br />
				- 'likelihood':		[FLOAT]	It says how much the performance is closed to the original one. 0 means identical, '-inf' means completely different.
				<br />
				- 'likelihoodnorm': [FLOAT]	Same as before but normalized so that its sum is always equal to 1 (the phrase with the highest value is the closest to the original one).
				<br />
				- 'likeliest': [INT] The index of the phrase with highest likelihood.
				<br />
			</description>
		</entry>
		<entry name="3 - Dump">
			<description>
				<br /><br />Dump various information.
				<br />
			</description>
		</entry>
		
	</misc>

	
	<!--EXAMPLE-->
	<examplelist>
		<example caption="Basic video scrubbing using the mouse position" img="gf.png" />
	</examplelist>
	<!--SEEALSO-->
	<seealsolist>
		<seealso name="follow">
			follow
		</seealso>
	</seealsolist>
</c74object>
