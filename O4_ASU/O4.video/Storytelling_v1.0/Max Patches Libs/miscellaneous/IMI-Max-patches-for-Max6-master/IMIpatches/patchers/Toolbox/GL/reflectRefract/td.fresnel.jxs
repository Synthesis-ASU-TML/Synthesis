<jittershader name="contrast-interp">
	<description>Sphere Map Reflection Shader</description>
	<param name="tex0" type="int" default="0" />
	<param name="tex1" type="int" default="1" />
	<param name="scale" type="vec2" default="1.0 1.0" />
	<param name="fresnel" type="vec3" default="0.05 2. 0.95" />
	<language name="glsl" version="1.0">
		<bind param="tex0" program="fp" />
		<bind param="tex1" program="fp" />
		<bind param="scale" program="fp" />
		<bind param="fresnel" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[

varying vec2 texcoord0;
varying vec2 texdim0;
varying vec4 V;
varying vec3 N;

void main (void)

{
	V = gl_ModelViewMatrix * gl_Vertex;
	N = normalize(gl_NormalMatrix * gl_Normal);
    
	texdim0 = vec2 (abs(gl_TextureMatrix[0][0][0]),abs(gl_TextureMatrix[0][1][1]));
    texcoord0	= vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
    gl_Position	= ftransform();
}
]]>		
		</program>
		<program name="fp" type="fragment">
<![CDATA[

varying vec2 texcoord0;
varying vec2 texdim0;
uniform sampler2DRect tex0;
uniform sampler2DRect tex1;

varying vec4 V;
varying vec3 N;

uniform vec2 scale;
uniform vec3 fresnel;

const vec4 backg = vec4(1.);


vec2 sphereMap(vec3 R)
{
	float m = 2.*sqrt(R.x*R.x + R.y*R.y + (R.z+1.)*(R.z+1.));	//p. 382 glspec
	vec2 reflectCoords;
	reflectCoords.s = (R.x/m + 0.5);
	reflectCoords.t = 1.-(R.y/m + 0.5);
	reflectCoords *= texdim0;
	
	return reflectCoords;
}

void main (void)
{
	vec3 scaleVertex = vec3(scale*V.xy, V.z);
	vec3 Nn = normalize(N);
	vec3 Vn = normalize(scaleVertex);
	
	//vec3 R = Vn-2.*Nn*dot(Nn, Vn);
	vec3 R = reflect(Vn, Nn);
	
	
	//Fresnel:  (bias, scale, falloff)
	float reflectionCoeff = max(0., min(1., fresnel.x + fresnel.y * 
											pow(1.-abs(dot(Vn, Nn)), fresnel.z)));
	
	vec2 reflectCoords = sphereMap(R);
	
	
	vec3 Rfract = refract(Vn, Nn, 1.33);
	vec2 refractCoords = sphereMap(Rfract);	
	
	
	vec4 R_color = texture2DRect(tex0, reflectCoords);
	vec4 Rf_color = texture2DRect(tex1, reflectCoords);
	vec4 Rf_color2 = texture2DRect(tex0, Rfract.xy*2.*texdim0);
	
	vec4 color = mix(R_color, Rf_color+Rf_color2*0.5, reflectionCoeff);
	
	gl_FragColor = color;
}
]]>		
		</program>		
	</language>
</jittershader>
