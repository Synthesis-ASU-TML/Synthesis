<jittershader name="particle quads">
	<description></description>
	<param name="tscale" type="vec2" default="0.25 0.25" />	
	<param name="scale" type="vec2" default="0.05 0.05" />
	<param name="tex0" type="int" default="0" />
	<language name="glsl" version="1.2">
		<bind param="scale" program="gp" />
		<bind param="tscale" program="gp" />
		<bind param="tex0" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[

#version 120

varying vec2 texdim0;
varying vec2 texdim1;
varying vec2 texcoord0;
varying vec2 texcoord1;

void main(void)
{
	//just send the things as they are
	gl_Position = gl_Vertex;
	gl_FrontColor = gl_Color;
	texdim0 = vec2 (abs(gl_TextureMatrix[0][0][0]),abs(gl_TextureMatrix[0][1][1]));
	texdim1 = vec2 (abs(gl_TextureMatrix[1][0][0]),abs(gl_TextureMatrix[1][1][1]));
	texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
	texcoord1 = vec2(gl_TextureMatrix[1] * gl_MultiTexCoord1);

}

]]>		
		</program>
		<program name="gp" vertices_out="4" input_type="points" output_type="triangle_strip" type="geometry">
<![CDATA[

#version 120
#extension GL_EXT_geometry_shader4 : enable

uniform vec2 scale;
uniform vec2 tscale;
varying in vec2 texdim0[1];
varying in vec2 texcoord0[1];
varying out vec2 TC;

void main(void)
{
		vec4 centr = gl_ModelViewProjectionMatrix*gl_PositionIn[0];
		//float vdist = length(centr.xyz);
		vec4 dofp = vec4(scale,0.,0.);
		vec4 dimmed = gl_FrontColorIn[0];
	
		gl_FrontColor = dimmed;
		TC = texcoord0[0];
		gl_Position =  vec4(centr+vec4(-dofp.x,dofp.y,dofp.zw));
		EmitVertex();
		
		gl_FrontColor =dimmed;
		TC = texcoord0[0]+vec2(0., -1.)*tscale*texdim0[0];
		gl_Position = vec4(centr+vec4(-dofp.xy,dofp.zw));
		EmitVertex();

		gl_FrontColor = dimmed;
		TC = texcoord0[0]+vec2(1., 0.)*tscale*texdim0[0];
		gl_Position =  vec4(centr+vec4(dofp.x,dofp.y,dofp.zw));
		EmitVertex();

		gl_FrontColor = dimmed;
		TC = texcoord0[0]+vec2(1., -1.)*tscale*texdim0[0];
		gl_Position = vec4(centr+vec4(dofp.x,-dofp.y,dofp.zw));
		EmitVertex();

		EndPrimitive();
}


]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[

#version 120
#extension GL_ARB_texture_rectangle : enable

varying vec2 TC;
uniform sampler2DRect tex0;

void main (void)
{
	
	vec4 thecolor= texture2DRect(tex0,TC)*gl_Color;
	gl_FragColor = thecolor;
	//gl_FragColor = texture2DRect(tex1,TC1);
}


]]>		
		</program>		
	</language>
</jittershader>
