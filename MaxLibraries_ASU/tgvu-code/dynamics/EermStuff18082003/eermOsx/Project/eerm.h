// eerm.h //   a particle/token based response model//====================== Includes#ifndef _eerm_h#define _eerm_h//#include "eermDefines.h"//#include "eermDefaults.h"//#include "GraphModelUtilI.h"//#include "feature.h"//#include "node.h"//#include "simplex.h"//#include "token.h"// TODO : be sure to copy token attributes to/from the tmptoken.// Todo : Track down all the todos.typedef struct eerm{	int Nn;	int NnMax;	int NsMax;		// (current) maximum number simplices	int Ns;			// current number simplices	int Nt;	int NtMax;	Token **tokens;	Node **nodes; 	 		// the graph is a list of structured pnodes		Simplex **simplices;	// the complex of simplices; a simplex points to the relevant nodes	Simplex *tmpsmp;	 	// temporary simplex	Node *tmpnode;	 		// temporary node	Token *tmptoken;	Feature *protof;		// prototype feature	Simplex *entrysimplex;		// where new tokens are added	float dt;				// a timescale	float temp;		int sensorforce;	// flag switching sensor coupling mode} Eerm;	//====================== Methods// Todo : verify that there is no iteration// on deallocated structs.// Todo : implement struct ref counts -- need smart pointers?// Todo : Change refs to Ns to pointer variables, so// that all simplices may point to the common value. (?)//---------------------- Validity checksvoid EermIsValid(Eerm *e);TBool NodeIndexListIsValid(Eerm *e, int *n, int Nn);TBool SortedNodeIndexListIsValid(Eerm *e, int *n, int Nn);//---------------------- New / FreeEerm	*EermNew(int Nn, int NsMax, int NtMax, int Nf, float dt); void 	EermFree(Eerm *e);  //---------------------- Addsint	EermTokenAdd(Eerm *e, Token *t); int EermTokenAddAt(Eerm *e, Token *t, int i);	int	EermNodeAdd(Eerm *e, Node *n); int 	EermSimplexAdd(Eerm *e, int Nn, int *n);	void	EermMoreTokens(Eerm *e, int NtMax);int		EermNodeAdd(Eerm *e, Node *n);	// Todo : need NnMax to avoid resize?//---------------------- Setvoid EermSetDt(Eerm *e, float dt);void EermSetSlew(Eerm *e, float slew);void EermSetWeights(Eerm *e, float *w, int n);void	TokenSetSimplex(Token *t, Simplex *s, Eerm *e);  // Todo : remove this ref to e by resizing token memory when simplex changes.void	TokenSetSimplexWithCoord(Token *t, Simplex *s, Eerm *e, float *coord, float *vcoord, int Nn);void	EermSetEntry(Eerm *e, int i);//---------------------- GetToken *EermToken(Eerm *e, int index);Node *EermNode(Eerm *e, int index);Simplex *EermSimplex(Eerm *e, int index);//---------------------- Calcvoid	TokenForce(Token *t, Eerm *e, float *F, int Nn);void 	TokenSensorForceAccum(Token *t, float *F, int N, int sensorforce);float NodeSensorCoupling(Node *n, Feature *f);void	EermForceMeter(Eerm *e, Feature *f, float *forces, int Nn);// -- Evolution --    void	EermTokensEvolve(Eerm *e); void 	TokenEvolve(Token *t, Eerm *e);//int	TokenTransition(Token *t, Eerm *e, Node *ndelete);  // transition deletes nvoid  TokenCheckTransition(Token *t, Eerm *e);void 	TokenDoTransition(Token *t, Eerm *e, int NodeLostIndex);int 	TokenFindTransition(Token *t, Eerm *e, int NodeLostIndex);// -- Compare --int 	EermNodeListFind(Eerm *e, Node **NodeList, int Nn);void 	EermSimplexDelete(Eerm *e, int i);void EermSimplexZeroTp(Eerm *e, int i);// -- Output --void ActiveSimplices(Eerm *e, int *simplices, int Ns);//===================== Not Yet Finishedvoid 	EermMoreNodes(Eerm *e, int NnMax);void 	EermMoreSimplices(Eerm *e, int NsMax);void 	EermTokenDelete(Eerm *e, int i);void	EermNodeDelete(Eerm *e, int i);Node *SimplexSubdivide(Simplex *s, Eerm *e);int	NodeFuse(Node *n1, Node *n2, int opt);#endif