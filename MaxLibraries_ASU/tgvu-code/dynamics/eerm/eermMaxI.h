//====================== Includes#include "ext.h"#include "eerm.h"#include "eermGraphicsI.h"//======================= Definitiontypedef struct maxeerm{		Object ob;	void *out;	void *xout;		Eerm m;	void *evolclock;	short packcoords;	short autopost;	short dt;} MaxEerm;void *MaxEermClass;//======================= SymbolsSymbol *PsFoo;//======================= Max Methods//----------------------- New / Freevoid MaxEermFree(MaxEerm *m);void MaxEermNew(Symbol *s, short argc, Atom *argv);//----------------------- Message handlingvoid MaxEermBang(MaxEerm *m);void MaxEermInt(MaxEerm *m, int i);void MaxEermFoo(MaxEerm *m, Symbol *msg, short argc, Atom *argv);//======================= Implementations//----------------------- Mainvoid main(fptr *f){	setsymbols();		setup(&MaxEermClass, MaxEermNew, (method)MaxEermFree, (short)sizeof(MaxEerm), 0L, A_GIMME, 0);	addbang((method)MaxEermBang);	addint((method)MaxEermInt);	addmess((method)MaxEermFoo, PsFoo, A_GIMME, 0); 	finder_addclass("Data","Eerm");}void setsymbols(){	PsFoo = gensym("foo");}//----------------------- New / Freevoid *MaxEermNew(Symbol *s, short argc, Atom *argv){	int 		nnodes, nmaxsimplices, nmaxtokens, df;	float 		dt;	MaxEerm 		*m;		m = (MaxEerm *)newobject(MaxEermClass);	m->e = EermNew(nnodes, nmaxsimplices, nmaxtokens, df, dt);		post("new eerm!");	return(m);}//----------------------- Messagesvoid MaxEermBang(MaxEerm *m){	post("bang");}void MaxEermInt(MaxEerm *m, int i){	post("int=%d",i);}