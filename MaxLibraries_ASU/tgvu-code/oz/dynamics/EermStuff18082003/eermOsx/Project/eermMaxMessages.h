#ifdef NotDefined//================ EermMax Messages://  The following messages are implemented in the Max interface.//  Somewhat more are implemented in the eerm itself.////  Checked messages [x] have been more or less tested.//  Dashed messages  [-] are less immediately critical.////  (fX = float, bX = bool, iX = int, sX = symbol)//  < a | b > means that one of a or b is required.//---------------- Eerm /  Global// The eermMax object, with args:[x](New) [iNNodes [iNmaxSimplices [iNMaxTokens [iNf [fDt]]]]]// Set the evolution interval in milliseconds:[x]SetDt fDt// Set global weights for the relative importance of different // sensor channels[x]SetWeights f1 f2 ..// Start/stop evolving tokens in the system:[ ]ClockEvolution < 0 | 1 >   [x]Continuous   [x]Discrete	 [ ]Combined - crash.// Execute one evolution step (uses Dt for dynamic stepsize)[ ]ClockOnce// Set the feature slew:[x]SetSlew f// Set the force law:[ ]SetForce < Spring | InverseSquare >// Measure the partial force of the feature (f1 f2 ..) due to each node.[ ]ForceMeter f1 f2 ..// Post simplices in the current Eerm, with labels and nodes.[x]PostSimplices// Output the state of all tokens in the Eerm.[x]PostTokens//---------------- Node// Create a node with the indicated label[-]NodeNew sNodeLabel // Set the label of the named label.[x]NodeSetLabel iNodeIndex sNodeLabel[-]NodeSetLabel sOldLabel sNewLabel// Set the mean of the named node.[x]NodeSetMean sNodeLabel f1 f2 ..[x]NodeSetMean iNodeIndex f1 f2 ..// Set the var of the named node.[x]NodeSetVar sNodeLabel f1 f2 ..[x]NodeSetVar iNodeIndex f1 f2 ..//---------------- Simplex// Set entry simplex:[x]SimplexSetEntry sSimplexLabel [x]SimplexSetEntry iNode1 iNode2 ..// Create a simplex with the indicated name (string), consisting of the// nodes with the indicated indexes. [x]SimplexNew sSimplexLabel iNode1 iNode2 ..[x]SimplexNew sSimplexLabel sNode1 sNode2 ..// Open a transition between the indicated simplices and transition weight.// Simplices must share a boundary.[x]SimplexSetTp sSimplexLabel1s sSimplexLabel2s fTp// Delete the named simplex[-]SimplexDelete sSimplexLabel[-]SimplexDelete iNode1 iNode2 ..//---------------- Token// In this test order:// Create a stulle token with the indicated label..[ ]StulleTokenNew sTokenLabel// Set the damping of the named token[ ]TokenSetDamping sTokenLabel fDamping// Set the ExpScale of the named token[ ]TokenSetExpScale sTokenLabel fExpScale// Update sensor data assoc. to a token// (if dne, new token created with default properties) [x]sTokenLabel f1 f2 ..[x]TokenFeatureUpdate sTokenLabel f1 f2 ...// Set the intra-simplex coord of the named token..[x]TokenSetCoord sTokenLabel f1 f2 .. f_Nn// Create a token with the indicated properties[x]TokenNew sTokenLabel [fMass [fExpscale [fDamping [fTokencoupling]]]]// Set the feature sensitivities of the named token..[x]TokenSetWeights sTokenLabel f1 f2 .. f_Nf// Set the mass of the named token.[x]TokenSetMass sTokenLabel fMass// Set the feature sensitivities of the named token..[x]TokenSetSimplex sTokenLabel sSimplexLabel[-]TokenSetSimplex sTokenLabel iNode1 iNode2 ..// Set the inter-token interaction strength for the named token[-]TokenSetTokenCoupling sTokenLabel fCouplingStrength// Delete the named token.[-]TokenDelete sTokenLabel#endif